---
description: 
globs: 
alwaysApply: true
---
こんにちは、Cursor AI！
これから「みんなの家計簿」というWebアプリケーションの開発を、あなたと一緒に進めていきたいと思っています。効率的に、そして楽しく開発を進めるために、まずはこのプロジェクトの基本的なルールと情報を共有します。今後のやり取りの前提として認識しておいてください。

【プロジェクト概要】
- **プロジェクト名:** みんなの家計簿
- **目的:** 個人ユーザー向けのシンプルな家計簿機能と、日本の国家予算の主要項目を分かりやすく可視化する機能を持つWebサービスを開発する。
- **ターゲットユーザー:** 一般の個人の方々、特に金融リテラシーを向上させたいと考えている人。
- **目指す価値:** お金の流れを透明化し、利用者が経済や自身の財務状況について関心を持ち、理解を深めるきっかけを提供すること。

【開発スタイルとツール】
- **開発体制:** ソロ開発（私一人で、あなたを主要な開発パートナーとして進めます）
- **AI活用:** あなた (Cursor AI) には、コーディング支援 (コード生成、リファクタリング)、デバッグ、技術的な質問への回答、アイデア出しなどを積極的に依頼します。時には壁打ち相手にもなってほしいです。
- **コードエディタ:** Cursor (VS Codeベース) - あなたの機能を最大限に活用します。
- **バージョン管理:** Git, GitHub (プライベートリポジトリを使用)

【技術スタック】
- **フロントエンドフレームワーク:** Next.js (最新版のApp Routerを使用)
- **プログラミング言語:** TypeScript (型安全性を重視)
- **スタイリング:** Tailwind CSS (効率的でメンテナブルなスタイリングを目指します)
- **バックエンド & データベース:** Supabase (PostgreSQLベースのBaaS)
    - **認証:** Supabase Auth
    - **データベース:** Supabase Database
    - **ストレージ:** Supabase Storage (将来的には画像アップロードなどで利用する可能性あり)
    - **Edge Functions:** Supabase Edge Functions (必要に応じて、サーバーサイドロジックの実装に利用)
- **フロントエンドホスティング:** Netlify (GitHubリポジトリと連携して自動デプロイ)
- **プロジェクト初期状態:** `bolt.new` (または類似のスターターキット) で基本的なディレクトリ構造 (`app`, `components`, `lib`, `types` など) と設定ファイル (ESLint, Prettier, tsconfigなど) は既にセットアップ済みです。

【コーディング規約・スタイル (基本的な希望)】
- **可読性:** コードは誰が見ても読みやすく、理解しやすいように記述してください。適切なコメントもお願いします。
- **型安全性:** TypeScriptの型システムを最大限に活用し、安全なコード記述を心がけてください。any型は極力避け、具体的な型定義をお願いします。
- **コンポーネント/関数の設計:** 関数やReactコンポーネントは、可能な範囲で小さく、単一責任の原則 (SRP) に従うようにしてください。再利用性も考慮してくれると嬉しいです。
- **エラーハンドリング:** 予期せぬエラーにも対応できるよう、適切なエラーハンドリング（try-catch, エラー境界など）を考慮してください。
- **Tailwind CSSのクラス名:** クラス名は意味が明確で、予測可能なものを使用してください。過度なインラインスタイルではなく、Tailwindのユーティリティクラスを優先してください。
- **ファイル/ディレクトリ構成:** 新しいファイルやコンポーネントを作成する際は、既存のディレクトリ構造 (`app` 内のルーティング規約、`components/ui` や `components/features`のような分類など) を参考に、適切な場所に配置することを提案してください。

【主な機能 (MVPスコープ)】
1.  **個人向け家計簿機能:**
    - ユーザー登録・ログイン・ログアウト (Supabase Auth を使用)
    - 収支入力フォーム (日付, 種類[収入/支出], カテゴリ[初期は固定], 金額, メモ)
    - 月間収支一覧・サマリー表示 (収入合計, 支出合計, 差引残高, カテゴリ別支出割合の円グラフ)
    - 収支データのCRUD (作成・読み取り・削除を優先。更新はMVPでは後回しでも可) - Supabase Database
    - カテゴリは初期は固定リストとし、プログラム内で定義する。
2.  **国家予算可視化機能:**
    - 直近単一年度の一般会計予算における歳入・歳出の主要項目を円グラフで表示。
    *   （データは、開発初期はフロントエンドのコード内にJSON形式で保持し、将来的にはSupabase Databaseに格納してそこから読み込む形を想定しています。まずはフロントエンド完結で表示できることを目指します。）
    - 各グラフには出典情報を明記する。

【進め方】
- **イテレーティブな開発:** 小さな機能単位（例: ログインフォームのUI作成 → ログイン機能の実装）で、あなたに相談しながら実装とテストを繰り返していきます。
- **UIデザイン:** 具体的なUIデザインについては、私が別途作成するワイヤーフレームや、画像生成AIで作成したイメージを参考に指示します。まずは機能性と基本的な使いやすさを重視します。
- **開発順序:**
    1.  Supabaseとの基本的な連携設定（環境変数設定、クライアント初期化）。
    2.  認証機能 (ユーザー登録、ログイン、ログアウト) のUIとロジック。
    3.  個人向け家計簿機能のUIとロジック（Supabase連携含む）。
    4.  国家予算可視化機能のUIとロジック。
    5.  Netlifyへのデプロイと動作確認。

【あなた (Cursor AI) へのお願い】
- **技術スタックと規約の遵守:** コードを生成・提案する際は、上記の技術スタックとコーディング規約を常に考慮してください。
- **ファイル配置の提案:** 新しいファイルを作成する場合は、既存のディレクトリ構造に合わせた適切な配置場所を提案してください（例: `@app/login/page.tsx` や `@components/ui/Button.tsx` など、Cursorのファイル参照機能も活用したいです）。
- **能動的な支援:** エラーが発生した場合のデバッグ支援はもちろん、より効率的で堅牢な実装方法や、セキュリティ面で気をつけるべき点など、私が見落としがちな部分についても積極的にアドバイスや提案をしてくれると非常に助かります。
- **初心者への配慮:** 私がプログラミング初心者であることを念頭に置き、専門用語は分かりやすく解説したり、コードの意図や背景を丁寧に説明したりしてくれると嬉しいです。質問しやすい雰囲気を作ってくれるとありがたいです。

これから「みんなの家計簿」を一緒に作っていくのを楽しみにしています！
よろしくお願いします。

何か最初に私の方で準備しておくべきことや、このプロジェクトを進める上での一般的なアドバイス、あるいはあなたから私に確認しておきたいことがあれば、遠慮なく教えてください。